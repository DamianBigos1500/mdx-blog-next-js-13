// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mongodb"
  // url          = "file:./dev.db"
  url          = env("DATABASE_URL")
  // relationMode = "prisma"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  surname       String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  likedBlogs    pinnedBlogs[]
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

model BlogPost {
  id      String       @id @default(auto()) @map("_id") @db.ObjectId
  data    BlogPostData @relation(fields: [dataId], references: [id])
  dataId  String       @db.ObjectId
  content String
  slug    String

  @@fulltext([content])
}

model BlogPostData {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  imageUrl        String
  secondImageUrl  String
  blurhash        String
  preparationTime String
  description     String
  publishedAt     String
  BlogPost        BlogPost[]
  ingredients     Ingredient[] @relation(fields: [ingredientIDs], references: [id])
  ingredientIDs   String[]     @db.ObjectId

  @@fulltext([title])
}

model Ingredient {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  blogPost    BlogPostData[] @relation(fields: [blogPostIDs], references: [id])
  blogPostIDs String[]       @db.ObjectId

  @@fulltext([name])
}

model pinnedBlogs {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  blogPostSlug String
  userId       String @db.ObjectId
  user         User   @relation(fields: [userId], references: [id])

  @@unique(fields: [blogPostSlug, userId], name: "like_identifier")
  @@index([userId])
}
