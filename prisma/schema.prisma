// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // url          = "file:./dev.db"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  surname       String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  likedBlogs    pinnedBlogs[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BlogPost {
  id      String       @id @default(cuid())
  data    BlogPostData @relation(fields: [dataId], references: [id])
  dataId  String       @unique
  content String       @db.Text
  slug    String       @db.Text
}

model BlogPostData {
  id              String       @id @default(cuid())
  title           String       @db.Text
  imageUrl        String       @db.Text
  secondImageUrl  String       @db.Text
  blurhash        String       @db.Text
  preparationTime String       @db.Text
  description     String       @db.Text
  publishedAt     String       @db.Text
  BlogPost        BlogPost[]
  ingredients     Ingredient[]
}

model Ingredient {
  id         String       @id @default(cuid())
  name       String
  blogPostId String
  blogPost   BlogPostData @relation(fields: [blogPostId], references: [id])

  @@index([blogPostId])
}

model pinnedBlogs {
  id           String @id @default(cuid())
  blogPostSlug String
  userId       String
  user         User   @relation(fields: [userId], references: [id])

  @@unique(fields: [blogPostSlug, userId], name: "like_identifier")
  @@index([userId])
}
